import createMemoizingGetter from 'nanotools/lib/createMemoizingGetter'
import makeSelectorObservable from '../makeSelectorObservable'

augmentSelector = (selector, instance, makeScoped, makeObservable) ->
  boundSelector = if makeScoped:
    (state, ...args) -> selector.call(this, instance.state, ...args)
  else:
    (...args) -> selector.apply(this, args)

  if makeObservable: makeSelectorObservable(instance, boundSelector) else: boundSelector

export default selector(opts) ->
  now opts = Object.assign({ isObservable: false, isScoped: true }, opts)
  { isObservable, isScoped } = opts

  (proto, key, descriptor) ->
    originalSelector = descriptor.value

    if typeof originalSelector !== 'function':
      throw new Error("redux-components: @selector decorator (applied to #{proto.constructor?.name}.#{key}) can only be applied to selectors.")

    {
      configurable: true
      get: createMemoizingGetter(proto, key, originalSelector, -> augmentSelector(originalSelector, this, isScoped, isObservable))
    }
